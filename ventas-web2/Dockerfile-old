# --- Imagen Base: Apache con PHP 8.2 ---
# Partimos de una imagen oficial que ya incluye Apache y PHP 8.2 preconfigurados.
# Esto nos ahorra tener que instalar y configurar el servidor web manualmente.
FROM php:8.2-apache

# --- Variables de Entorno ---
# Configuramos variables para evitar que la instalación de paquetes nos pida confirmación interactiva.
ENV DEBIAN_FRONTEND=noninteractive

# --- Directorio de Trabajo ---
# Establecemos el directorio de trabajo dentro del contenedor.
# Apache en esta imagen está configurado para servir archivos desde aquí.
WORKDIR /var/www/html

# --- Instalación de Dependencias del Sistema ---
# Primero, actualizamos la lista de paquetes del sistema operativo (Debian).
# Luego, instalamos las utilidades y librerías que necesitaremos más adelante.
RUN apt-get update && apt-get install -y \
    git \
    curl \
    unzip \
    zip \
    # Dependencias para las extensiones de PHP
    libzip-dev \
    libpng-dev \    
    libjpeg-dev \   
    libfreetype-dev \ 
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# --- Instalación de Extensiones de PHP ---
# Usamos el script oficial 'docker-php-ext-install' para compilar e instalar las extensiones de PHP.
# - pdo_mysql: Para conectar con tu base de datos MySQL externa.
# - bcmath: Para operaciones matemáticas de precisión, común en Laravel.
# - gd: Para la manipulación de imágenes (requerido por DOMPDF y útil para maatwebsite/excel).
# - zip: Para manejar archivos .zip (fundamental para maatwebsite/excel al crear .xlsx).
RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install pdo_mysql bcmath gd zip

# --- Instalación de Composer (Gestor de Paquetes de PHP) ---
# Descargamos y movemos Composer a una ruta global para poder usarlo desde cualquier lugar.
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# --- Configuración de Apache ---
# Habilitamos 'mod_rewrite' de Apache, que es esencial para las URLs amigables de Laravel.
RUN a2enmod rewrite

# Copiamos nuestro archivo de configuración personalizado para el VirtualHost de Apache.
# Este archivo le dirá a Apache que el directorio raíz de la web es /public.
COPY docker/000-default.conf /etc/apache2/sites-available/000-default.conf

# --- Copia del Código Fuente y Permisos Finales ---
# Ahora que todas las dependencias están instaladas, copiamos el resto del código de la aplicación.
COPY . .

# Instalamos las dependencias de producción, sin paquetes de desarrollo y optimizando el autoloader.
RUN composer install --no-interaction --no-dev --optimize-autoloader

# --- Instalación de Dependencias y Compilación del Frontend (React) ---
# Instalamos Node.js y npm para poder compilar nuestros assets de React.
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Copiamos los archivos de dependencias de Node.js.
COPY package.json package-lock.json ./
# Instalamos las dependencias del frontend.
RUN npm install
# Compilamos los assets de React para producción (esto creará la carpeta /public/build).
RUN npm run build



# Asignamos los permisos correctos a los directorios de storage y cache.
# Apache (que corre como el usuario www-data) necesita poder escribir en estas carpetas.
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache \
    && chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache

# --- Exposición del Puerto ---
# El contenedor escuchará en el puerto 80, que es el puerto estándar de HTTP.
EXPOSE 80

# El comando de inicio ('apache2-foreground') ya está definido en la imagen base,
# por lo que no es necesario añadir un CMD. Apache se iniciará automáticamente.